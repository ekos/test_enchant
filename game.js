// Generated by CoffeeScript 1.3.3
(function() {
  var Bullet, Enemy, EnemyManage, Player, SampleGame, Score, Shot,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  SampleGame = (function(_super) {

    __extends(SampleGame, _super);

    SampleGame.WIDTH_SIZE = 320;

    SampleGame.HEIGHT_SIZE = 320;

    SampleGame.DOWN = 0;

    SampleGame.LEFT = 1;

    SampleGame.RIGHT = 2;

    SampleGame.UP = 3;

    SampleGame.GAMEOVER_WAIT = 50;

    function SampleGame() {
      SampleGame.__super__.constructor.call(this, SampleGame.WIDTH_SIZE, SampleGame.HEIGHT_SIZE);
      this.fps = 30;
      SampleGame.game = this;
      this.preload("puzzle.png");
      this.preload("chara.png");
      this.preload("enemy.png");
      this.preload("enemy2.png");
      this.preload("start.png");
      this.preload("end.png");
      this.onload = function() {
        return SampleGame.game.pushScene(SampleGame.game.makeSceneStart());
      };
      SampleGame.game.makeSceneStart = function() {
        var bg, scene, start;
        scene = new Scene();
        start = new Sprite(236, 48);
        start.moveTo(SampleGame.WIDTH_SIZE / 2 - 236 / 2, SampleGame.HEIGHT_SIZE / 2 - 48 / 2);
        start.image = SampleGame.game.assets['start.png'];
        scene.addChild(start);
        bg = new Sprite(SampleGame.WIDTH_SIZE, SampleGame.HEIGHT_SIZE);
        bg.addEventListener('touchstart', function() {
          scene.removeChild(start);
          scene.removeChild(bg);
          return SampleGame.game.pushScene(SampleGame.game.makeSceneGame());
        });
        scene.addChild(bg);
        return scene;
      };
      SampleGame.game.makeSceneGame = function() {
        SampleGame.player = new Player(100, 100);
        this.rootScene.addChild(SampleGame.player);
        SampleGame.backSprite = new Sprite(SampleGame.WIDTH_SIZE, 100);
        SampleGame.back = new Surface(SampleGame.WIDTH_SIZE, 100);
        SampleGame.back.context.fillStyle = "#CCCCCC";
        SampleGame.back.context.fillRect(0, 0, SampleGame.WIDTH_SIZE, 100);
        SampleGame.backSprite.image = SampleGame.back;
        SampleGame.backSprite.moveTo(0, SampleGame.HEIGHT_SIZE - 100);
        this.rootScene.addChild(SampleGame.backSprite);
        SampleGame.pad = new Pad();
        SampleGame.pad.moveTo(0, 220);
        this.rootScene.addChild(SampleGame.pad);
        SampleGame.button = new Shot(220, 220);
        this.rootScene.addChild(SampleGame.button);
        SampleGame.enemy = new EnemyManage();
        this.rootScene.addChild(SampleGame.enemy);
        SampleGame.score = new Score(120, 230);
        this.rootScene.addChild(SampleGame.score);
        this.addEventListener('enterframe', function() {
          var i, _i, _j, _k, _l, _ref, _ref1;
          this.rootScene.removeChild(SampleGame.backSprite);
          this.rootScene.removeChild(SampleGame.pad);
          this.rootScene.removeChild(SampleGame.button);
          for (i = _i = 0, _ref = Score.STR_INDEX.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            this.rootScene.removeChild(SampleGame.score.str_sprite[i]);
          }
          for (i = _j = 0; _j < 5; i = ++_j) {
            this.rootScene.removeChild(SampleGame.score.num_sprite[i]);
          }
          this.rootScene.insertBefore(SampleGame.backSprite);
          this.rootScene.insertBefore(SampleGame.pad);
          this.rootScene.insertBefore(SampleGame.button);
          for (i = _k = 0, _ref1 = Score.STR_INDEX.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
            this.rootScene.insertBefore(SampleGame.score.str_sprite[i]);
          }
          for (i = _l = 0; _l < 5; i = ++_l) {
            this.rootScene.insertBefore(SampleGame.score.num_sprite[i]);
          }
          SampleGame.hit_enemy_id = SampleGame.player.is_enemy_hit();
          if (SampleGame.hit_enemy_id !== -1) {
            SampleGame.game.pushScene(SampleGame.game.makeSceneResult());
          }
          return SampleGame.score.score_update();
        });
        return this.rootScene;
      };
      SampleGame.game.makeSceneResult = function() {
        var end, i, _i, _ref;
        SampleGame.enemy.clearEventListener('enterframe');
        SampleGame.player.clearEventListener('enterframe');
        SampleGame.button.clearEventListener('enterframe');
        for (i = _i = 0, _ref = EnemyManage.ENEMY_MAX; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          SampleGame.enemy.enemy_obj[i].clearEventListener('enterframe');
        }
        SampleGame.enemy.enemy_obj[SampleGame.hit_enemy_id].flash();
        SampleGame.player.flash();
        SampleGame.game_over_wait = SampleGame.GAMEOVER_WAIT;
        SampleGame.game_over_view = false;
        end = new Sprite(189, 97);
        end.moveTo(SampleGame.WIDTH_SIZE / 2 - 189 / 2, SampleGame.HEIGHT_SIZE / 2 - 97 / 2);
        end.image = SampleGame.game.assets['end.png'];
        end.visible = false;
        this.rootScene.addChild(end);
        this.addEventListener('enterframe', function() {
          if (!SampleGame.game_over_view) {
            SampleGame.game_over_wait--;
          }
          if (SampleGame.game_over_wait < 0 && !SampleGame.game_over_view) {
            end.visible = true;
            return SampleGame.game_over_view = true;
          }
        });
        return this.rootScene;
      };
      this.start();
    }

    return SampleGame;

  })(Game);

  window.onload = function() {
    return new SampleGame();
  };

  Player = (function(_super) {

    __extends(Player, _super);

    Player.WIDTH = 32;

    Player.HEIGHT = 32;

    Player.ANIM_WAIT = 3;

    Player.ANIM_MAX = 3;

    Player.FRAME_INDEX = [[0, 1, 2], [6, 7, 8], [12, 13, 14], [18, 19, 20]];

    Player.MOVE_SPEED = 3;

    Player.FLASH_FRAME = 10;

    function Player(x, y) {
      Player.__super__.constructor.call(this, Player.WIDTH, Player.HEIGHT);
      this.now_frame_index = 0;
      this.anim_wait = Player.ANIM_WAIT;
      this.flash_frame = Player.FLASH_FRAME;
      this.player_turn = SampleGame.DOWN;
      this.x = x;
      this.y = y;
      this.image = SampleGame.game.assets['chara.png'];
      this.addEventListener('enterframe', function() {
        var input;
        input = SampleGame.game.input;
        if (input.down) {
          this.y = this.y + Player.MOVE_SPEED;
          this.player_turn = SampleGame.DOWN;
        }
        if (input.up) {
          this.y = this.y - Player.MOVE_SPEED;
          this.player_turn = SampleGame.UP;
        }
        if (input.left) {
          this.x = this.x - Player.MOVE_SPEED;
          this.player_turn = SampleGame.LEFT;
        }
        if (input.right) {
          this.x = this.x + Player.MOVE_SPEED;
          this.player_turn = SampleGame.RIGHT;
        }
        if (this.x < 0) {
          this.x = 0;
        }
        if (this.x > SampleGame.WIDTH_SIZE - Player.WIDTH) {
          this.x = SampleGame.WIDTH_SIZE - Player.WIDTH;
        }
        if (this.y < 0) {
          this.y = 0;
        }
        if (this.y > SampleGame.HEIGHT_SIZE - Player.HEIGHT - 100) {
          this.y = SampleGame.HEIGHT_SIZE - Player.HEIGHT - 100;
        }
        this.anim_wait--;
        if (this.anim_wait <= 0) {
          this.now_frame_index++;
          if (this.now_frame_index >= Player.ANIM_MAX) {
            this.now_frame_index = 0;
          }
          this.frame = Player.FRAME_INDEX[this.player_turn][this.now_frame_index];
          return this.anim_wait = Player.ANIM_WAIT;
        }
      });
    }

    Player.prototype.is_enemy_hit = function() {
      var distance, i, _i, _ref;
      for (i = _i = 0, _ref = EnemyManage.ENEMY_MAX; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (SampleGame.enemy.enemy_obj[i] !== null && !SampleGame.enemy.enemy_obj[i].is_die) {
          distance = ((Enemy.WIDTH - 14) + Player.WIDTH - 6) / 2;
          if (SampleGame.enemy.enemy_obj[i].within(this, distance)) {
            return i;
          }
        } else {
          return -1;
        }
      }
      return -1;
    };

    Player.prototype.flash = function() {
      this.flash_frame--;
      if (this.flash_frame <= 0) {
        if (this.visible) {
          this.visible = false;
        } else {
          this.visible = true;
        }
        this.flash_frame = Player.FLASH_FRAME;
      }
      return 0;
    };

    return Player;

  })(Sprite);

  Bullet = (function(_super) {

    __extends(Bullet, _super);

    Bullet.WIDTH = 16;

    Bullet.HEIGHT = 16;

    Bullet.MOVE_SPEED = 5;

    Bullet.FRAME_INDEX = [52, 50, 54, 48];

    function Bullet(x, y, turn) {
      Bullet.__super__.constructor.call(this, Bullet.WIDTH, Bullet.HEIGHT);
      this.x = x;
      this.y = y;
      this.bullet_turn = turn;
      this.is_die = false;
      this.image = SampleGame.game.assets['icon.png'];
      this.frame = Bullet.FRAME_INDEX[this.bullet_turn];
      this.addEventListener('enterframe', function() {
        if (this.bullet_turn === SampleGame.DOWN) {
          this.y += Bullet.MOVE_SPEED;
        } else if (this.bullet_turn === SampleGame.LEFT) {
          this.x -= Bullet.MOVE_SPEED;
        } else if (this.bullet_turn === SampleGame.RIGHT) {
          this.x += Bullet.MOVE_SPEED;
        } else if (this.bullet_turn === SampleGame.UP) {
          this.y -= Bullet.MOVE_SPEED;
        }
        if (this.x < 0 - Bullet.WIDTH) {
          this.is_die = true;
        }
        if (this.x > SampleGame.WIDTH_SIZE + Bullet.WIDTH) {
          this.is_die = true;
        }
        if (this.y < 0 - Bullet.HEIGHT) {
          this.is_die = true;
        }
        if (this.y > (SampleGame.HEIGHT_SIZE - 100) + Bullet.HEIGHT) {
          return this.is_die = true;
        }
      });
    }

    return Bullet;

  })(Sprite);

  Shot = (function(_super) {

    __extends(Shot, _super);

    function Shot(x, y) {
      var i, _i, _ref;
      Shot.__super__.constructor.call(this, 100, 100);
      Shot.SHOT_MAX = 5;
      this.bullet_num = 0;
      this.bullet_obj = [];
      this.x = x;
      this.y = y;
      this.image = SampleGame.game.assets['apad.png'];
      for (i = _i = 0, _ref = Shot.SHOT_MAX; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.bullet_obj[i] = null;
      }
      this.addEventListener('touchstart', function() {
        var bullet_turn, bullet_x, bullet_y, _j, _ref1, _results;
        if (this.bullet_num < Shot.SHOT_MAX) {
          bullet_turn = SampleGame.player.player_turn;
          if (bullet_turn === SampleGame.DOWN) {
            bullet_x = SampleGame.player.x + (16 / 2);
            bullet_y = SampleGame.player.y + 16.;
          } else if (bullet_turn === SampleGame.UP) {
            bullet_x = SampleGame.player.x + (16 / 2);
            bullet_y = SampleGame.player.y - 16.;
          } else if (bullet_turn === SampleGame.LEFT) {
            bullet_x = SampleGame.player.x - 16.;
            bullet_y = SampleGame.player.y + (16 / 2);
          } else if (bullet_turn === SampleGame.RIGHT) {
            bullet_x = SampleGame.player.x + 16.;
            bullet_y = SampleGame.player.y + (16 / 2);
          }
          _results = [];
          for (i = _j = 0, _ref1 = Shot.SHOT_MAX; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            if (this.bullet_obj[i] === null) {
              this.bullet_obj[i] = new Bullet(bullet_x, bullet_y, bullet_turn);
              SampleGame.game.rootScene.addChild(this.bullet_obj[i]);
              this.bullet_num++;
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      });
      this.addEventListener('enterframe', function() {
        var _j, _ref1, _results;
        _results = [];
        for (i = _j = 0, _ref1 = Shot.SHOT_MAX; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (this.bullet_obj[i] !== null) {
            if (this.bullet_obj[i].is_die) {
              SampleGame.game.rootScene.removeChild(this.bullet_obj[i]);
              this.bullet_obj[i] = null;
              _results.push(this.bullet_num--);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }

    return Shot;

  })(Sprite);

  EnemyManage = (function(_super) {

    __extends(EnemyManage, _super);

    EnemyManage.ENEMY_MAX = 5;

    function EnemyManage() {
      var i, _i, _ref;
      EnemyManage.__super__.constructor.call(this, 0, 0);
      this.enemy_num = 0;
      this.enemy_obj = [];
      for (i = _i = 0, _ref = EnemyManage.ENEMY_MAX; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.enemy_obj[i] = null;
      }
      this.addEventListener('enterframe', function() {
        var x_rand, y_rand, _j, _k, _ref1, _ref2, _results;
        if (this.enemy_num < EnemyManage.ENEMY_MAX) {
          for (i = _j = 0, _ref1 = EnemyManage.ENEMY_MAX; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            if (this.enemy_obj[i] === null) {
              x_rand = Math.floor(Math.random() * SampleGame.WIDTH_SIZE);
              y_rand = Math.floor(Math.random() * SampleGame.HEIGHT_SIZE);
              if (x_rand < (SampleGame.WIDTH_SIZE / 2)) {
                x_rand -= (SampleGame.WIDTH_SIZE / 2) - Enemy.WIDTH;
              } else {
                x_rand += SampleGame.WIDTH_SIZE / 2;
              }
              if (y_rand < (SampleGame.HEIGHT_SIZE / 2)) {
                y_rand -= (SampleGame.HEIGHT_SIZE / 2) - Enemy.HEIGHT;
              } else {
                y_rand += SampleGame.HEIGHT_SIZE / 2;
              }
              this.enemy_obj[i] = new Enemy(x_rand, y_rand);
              SampleGame.game.rootScene.addChild(this.enemy_obj[i]);
              this.enemy_num++;
              break;
            }
          }
        }
        _results = [];
        for (i = _k = 0, _ref2 = EnemyManage.ENEMY_MAX; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          if (this.enemy_obj[i] !== null) {
            if (this.enemy_obj[i].is_die) {
              SampleGame.game.rootScene.removeChild(this.enemy_obj[i]);
              this.enemy_obj[i] = null;
              _results.push(this.enemy_num--);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }

    return EnemyManage;

  })(Sprite);

  Enemy = (function(_super) {

    __extends(Enemy, _super);

    Enemy.SPEED_RATE = 0.5;

    Enemy.WIDTH = 54;

    Enemy.HEIGHT = 70;

    Enemy.HIT_POINT = 10;

    Enemy.DAMAGE_FRAME = 5;

    Enemy.FLASH_FRAME = 10;

    function Enemy(x, y) {
      Enemy.__super__.constructor.call(this, Enemy.WIDTH, Enemy.HEIGHT);
      this.image = SampleGame.game.assets['enemy.png'];
      this.x = x;
      this.y = y;
      this.hit_point = Enemy.HIT_POINT;
      this.is_die = false;
      this.is_damage = false;
      this.damage_frame = 0;
      this.flash_frame = Enemy.FLASH_FRAME;
      this.addEventListener('enterframe', function() {
        var distance, i, l, x_speed, y_speed, _i, _ref, _results;
        x_speed = (SampleGame.player.x + Player.WIDTH / 2) - (this.x + Enemy.WIDTH / 2);
        y_speed = (SampleGame.player.y + Player.HEIGHT / 2) - (this.y + Enemy.HEIGHT / 2);
        l = Math.sqrt(x_speed * x_speed + y_speed * y_speed);
        this.x += (x_speed / l) * Enemy.SPEED_RATE;
        this.y += (y_speed / l) * Enemy.SPEED_RATE;
        if (this.is_damage) {
          this.damage_frame--;
          if (this.damage_frame <= 0) {
            this.is_damage = false;
            this.image = SampleGame.game.assets['enemy.png'];
          }
        }
        _results = [];
        for (i = _i = 0, _ref = Shot.SHOT_MAX; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (SampleGame.button.bullet_obj[i] !== null && !SampleGame.button.bullet_obj[i].is_die) {
            distance = ((Enemy.WIDTH - 14) + Bullet.WIDTH) / 2;
            if (SampleGame.button.bullet_obj[i].within(this, distance)) {
              if (SampleGame.button.bullet_obj[i].bullet_turn === SampleGame.DOWN) {
                this.y += 10;
              } else if (SampleGame.button.bullet_obj[i].bullet_turn === SampleGame.UP) {
                this.y -= 10;
              } else if (SampleGame.button.bullet_obj[i].bullet_turn === SampleGame.RIGHT) {
                this.x += 10;
              } else if (SampleGame.button.bullet_obj[i].bullet_turn === SampleGame.LEFT) {
                this.x -= 10;
              }
              SampleGame.button.bullet_obj[i].is_die = true;
              SampleGame.score.score_num += 3;
              this.image = SampleGame.game.assets['enemy2.png'];
              this.damage_frame = Enemy.DAMAGE_FRAME;
              this.is_damage = true;
              this.hit_point--;
              if (this.hit_point <= 0) {
                this.is_die = true;
                _results.push(SampleGame.score.score_num += 10);
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }

    Enemy.prototype.flash = function() {
      this.flash_frame--;
      if (this.flash_frame <= 0) {
        if (this.visible) {
          this.visible = false;
        } else {
          this.visible = true;
        }
        this.flash_frame = Enemy.FLASH_FRAME;
      }
      return 0;
    };

    return Enemy;

  })(Sprite);

  Score = (function(_super) {

    __extends(Score, _super);

    function Score(x, y) {
      var i, _i, _ref;
      Score.__super__.constructor.call(this, 0, 0);
      this.score_num = 0;
      this.x_offset = x;
      this.y_offset = y;
      Score.STR_INDEX = [51, 35, 47, 50, 37];
      Score.NUM_INDEX = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
      this.str_sprite = [];
      this.num_sprite = [];
      for (i = _i = 0, _ref = Score.STR_INDEX.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.str_sprite[i] = new Sprite(16, 16);
        this.str_sprite[i].moveTo(this.x_offset + 16 * i, this.y_offset);
        this.str_sprite[i].image = SampleGame.game.assets['font.png'];
        this.str_sprite[i].frame = Score.STR_INDEX[i];
        SampleGame.game.rootScene.addChild(this.str_sprite[i]);
      }
      this.num_sprite[0] = new Sprite(16, 16);
      this.num_sprite[0].moveTo(this.x_offset + 16 * 0, this.y_offset + 20);
      this.num_sprite[0].image = SampleGame.game.assets['font.png'];
      if (this.score_num === 0) {
        this.num_sprite[0].frame = Score.NUM_INDEX[0];
      } else {
        this.num_sprite[0].frame = Score.NUM_INDEX[Math.floor(this.score_num / 10000)];
      }
      SampleGame.game.rootScene.addChild(this.num_sprite[0]);
      this.num_sprite[1] = new Sprite(16, 16);
      this.num_sprite[1].moveTo(this.x_offset + 16 * 1, this.y_offset + 20);
      this.num_sprite[1].image = SampleGame.game.assets['font.png'];
      if (this.score_num === 0) {
        this.num_sprite[1].frame = Score.NUM_INDEX[0];
      } else {
        this.num_sprite[1].frame = Score.NUM_INDEX[Math.floor(this.score_num % 10000 / 1000)];
      }
      SampleGame.game.rootScene.addChild(this.num_sprite[1]);
      this.num_sprite[2] = new Sprite(16, 16);
      this.num_sprite[2].moveTo(this.x_offset + 16 * 2, this.y_offset + 20);
      this.num_sprite[2].image = SampleGame.game.assets['font.png'];
      if (this.score_num === 0) {
        this.num_sprite[2].frame = Score.NUM_INDEX[0];
      } else {
        this.num_sprite[2].frame = Score.NUM_INDEX[Math.floor(this.score_num % 1000 / 100)];
      }
      SampleGame.game.rootScene.addChild(this.num_sprite[2]);
      this.num_sprite[3] = new Sprite(16, 16);
      this.num_sprite[3].moveTo(this.x_offset + 16 * 3, this.y_offset + 20);
      this.num_sprite[3].image = SampleGame.game.assets['font.png'];
      if (this.score_num === 0) {
        this.num_sprite[3].frame = Score.NUM_INDEX[0];
      } else {
        this.num_sprite[3].frame = Score.NUM_INDEX[Math.floor(this.score_num % 100 / 10)];
      }
      SampleGame.game.rootScene.addChild(this.num_sprite[3]);
      this.num_sprite[4] = new Sprite(16, 16);
      this.num_sprite[4].moveTo(this.x_offset + 16 * 4, this.y_offset + 20);
      this.num_sprite[4].image = SampleGame.game.assets['font.png'];
      if (this.score_num === 0) {
        this.num_sprite[4].frame = Score.NUM_INDEX[0];
      } else {
        this.num_sprite[4].frame = Score.NUM_INDEX[Math.floor(this.score_num % 10)];
      }
      SampleGame.game.rootScene.addChild(this.num_sprite[4]);
    }

    Score.prototype.score_update = function() {
      var i, index, _i, _results;
      _results = [];
      for (i = _i = 0; _i < 5; i = ++_i) {
        if (this.score_num === 0) {
          _results.push(this.num_sprite[i].frame = Score.NUM_INDEX[0]);
        } else {
          index = null;
          if (i === 0) {
            index = this.score_num / 10000;
          }
          if (i === 1) {
            index = this.score_num % 10000 / 1000;
          }
          if (i === 2) {
            index = this.score_num % 1000 / 100;
          }
          if (i === 3) {
            index = this.score_num % 100 / 10;
          }
          if (i === 4) {
            index = this.score_num % 10;
          }
          _results.push(this.num_sprite[i].frame = Score.NUM_INDEX[Math.floor(index)]);
        }
      }
      return _results;
    };

    return Score;

  })(Sprite);

}).call(this);
