// Generated by CoffeeScript 1.3.3
(function() {
  var Bullet, Player, SampleGame, Shot,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  SampleGame = (function(_super) {

    __extends(SampleGame, _super);

    SampleGame.WIDTH_SIZE = 320;

    SampleGame.HEIGHT_SIZE = 320;

    SampleGame.DOWN = 0;

    SampleGame.LEFT = 1;

    SampleGame.RIGHT = 2;

    SampleGame.UP = 3;

    function SampleGame() {
      SampleGame.__super__.constructor.call(this, SampleGame.WIDTH_SIZE, SampleGame.HEIGHT_SIZE);
      this.fps = 30;
      SampleGame.game = this;
      this.preload("puzzle.png");
      this.preload("chara.png");
      this.onload = function() {
        var map;
        map = new Map(6, 5);
        map.image = SampleGame.game.assets['puzzle.png'];
        map.tileHeight = 18;
        map.tileWidth = 18;
        map.loadData([[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]]);
        SampleGame.player = new Player(100, 100);
        this.rootScene.addChild(SampleGame.player);
        SampleGame.backSprite = new Sprite(SampleGame.WIDTH_SIZE, 100);
        SampleGame.back = new Surface(SampleGame.WIDTH_SIZE, 100);
        SampleGame.back.context.fillStyle = "#CCCCCC";
        SampleGame.back.context.fillRect(0, 0, SampleGame.WIDTH_SIZE, 100);
        SampleGame.backSprite.image = SampleGame.back;
        SampleGame.backSprite.moveTo(0, SampleGame.HEIGHT_SIZE - 100);
        this.rootScene.addChild(SampleGame.backSprite);
        SampleGame.pad = new Pad();
        SampleGame.pad.moveTo(0, 220);
        this.rootScene.addChild(SampleGame.pad);
        SampleGame.button = new Shot(220, 220);
        this.rootScene.addChild(SampleGame.button);
        return this.addEventListener('enterframe', function() {
          this.rootScene.removeChild(SampleGame.backSprite);
          this.rootScene.removeChild(SampleGame.pad);
          this.rootScene.removeChild(SampleGame.button);
          this.rootScene.insertBefore(SampleGame.backSprite);
          this.rootScene.insertBefore(SampleGame.pad);
          return this.rootScene.insertBefore(SampleGame.button);
        });
      };
      this.start();
    }

    return SampleGame;

  })(Game);

  window.onload = function() {
    return new SampleGame();
  };

  Player = (function(_super) {

    __extends(Player, _super);

    Player.WIDTH = 32;

    Player.HEIGHT = 32;

    Player.ANIM_WAIT = 3;

    Player.ANIM_MAX = 3;

    Player.FRAME_INDEX = [[0, 1, 2], [6, 7, 8], [12, 13, 14], [18, 19, 20]];

    Player.MOVE_SPEED = 3;

    function Player(x, y) {
      Player.__super__.constructor.call(this, Player.WIDTH, Player.HEIGHT);
      this.now_frame_index = 0;
      this.anim_wait = Player.ANIM_WAIT;
      this.player_turn = SampleGame.DOWN;
      this.x = x;
      this.y = y;
      this.image = SampleGame.game.assets['chara.png'];
      this.addEventListener('enterframe', function() {
        var input;
        input = SampleGame.game.input;
        if (input.down) {
          this.y = this.y + Player.MOVE_SPEED;
          this.player_turn = SampleGame.DOWN;
        }
        if (input.up) {
          this.y = this.y - Player.MOVE_SPEED;
          this.player_turn = SampleGame.UP;
        }
        if (input.left) {
          this.x = this.x - Player.MOVE_SPEED;
          this.player_turn = SampleGame.LEFT;
        }
        if (input.right) {
          this.x = this.x + Player.MOVE_SPEED;
          this.player_turn = SampleGame.RIGHT;
        }
        if (this.x < 0) {
          this.x = 0;
        }
        if (this.x > SampleGame.WIDTH_SIZE - Player.WIDTH) {
          this.x = SampleGame.WIDTH_SIZE - Player.WIDTH;
        }
        if (this.y < 0) {
          this.y = 0;
        }
        if (this.y > SampleGame.HEIGHT_SIZE - Player.HEIGHT - 100) {
          this.y = SampleGame.HEIGHT_SIZE - Player.HEIGHT - 100;
        }
        this.anim_wait--;
        if (this.anim_wait <= 0) {
          this.now_frame_index++;
          if (this.now_frame_index >= Player.ANIM_MAX) {
            this.now_frame_index = 0;
          }
          this.frame = Player.FRAME_INDEX[this.player_turn][this.now_frame_index];
          return this.anim_wait = Player.ANIM_WAIT;
        }
      });
    }

    return Player;

  })(Sprite);

  Bullet = (function(_super) {

    __extends(Bullet, _super);

    Bullet.WIDTH = 16;

    Bullet.HEIGHT = 16;

    Bullet.MOVE_SPEED = 5;

    Bullet.FRAME_INDEX = [52, 50, 54, 48];

    function Bullet(x, y, turn) {
      Bullet.__super__.constructor.call(this, Bullet.WIDTH, Bullet.HEIGHT);
      this.x = x;
      this.y = y;
      this.bullet_turn = turn;
      this.is_die = false;
      this.image = SampleGame.game.assets['icon.png'];
      this.frame = Bullet.FRAME_INDEX[this.bullet_turn];
      this.addEventListener('enterframe', function() {
        if (this.bullet_turn === SampleGame.DOWN) {
          this.y += Bullet.MOVE_SPEED;
        } else if (this.bullet_turn === SampleGame.LEFT) {
          this.x -= Bullet.MOVE_SPEED;
        } else if (this.bullet_turn === SampleGame.RIGHT) {
          this.x += Bullet.MOVE_SPEED;
        } else if (this.bullet_turn === SampleGame.UP) {
          this.y -= Bullet.MOVE_SPEED;
        }
        if (this.x < 0 - Bullet.WIDTH) {
          this.is_die = true;
        }
        if (this.x > SampleGame.WIDTH_SIZE + Bullet.WIDTH) {
          this.is_die = true;
        }
        if (this.y < 0 - Bullet.HEIGHT) {
          this.is_die = true;
        }
        if (this.y > (SampleGame.HEIGHT_SIZE - 100) + Bullet.HEIGHT) {
          return this.is_die = true;
        }
      });
    }

    return Bullet;

  })(Sprite);

  Shot = (function(_super) {

    __extends(Shot, _super);

    function Shot(x, y) {
      var i, _i, _ref;
      Shot.__super__.constructor.call(this, 100, 100);
      Shot.SHOT_MAX = 20;
      this.bullet_num = 0;
      this.bullet_obj = [];
      this.x = x;
      this.y = y;
      this.image = SampleGame.game.assets['apad.png'];
      for (i = _i = 0, _ref = Shot.SHOT_MAX; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.bullet_obj[i] = null;
      }
      this.addEventListener('touchstart', function() {
        var bullet_turn, bullet_x, bullet_y, _j, _ref1, _results;
        if (this.bullet_num < Shot.SHOT_MAX) {
          bullet_turn = SampleGame.player.player_turn;
          if (bullet_turn === SampleGame.DOWN) {
            bullet_x = SampleGame.player.x + (16 / 2);
            bullet_y = SampleGame.player.y + 16.;
          } else if (bullet_turn === SampleGame.UP) {
            bullet_x = SampleGame.player.x + (16 / 2);
            bullet_y = SampleGame.player.y - 16.;
          } else if (bullet_turn === SampleGame.LEFT) {
            bullet_x = SampleGame.player.x - 16.;
            bullet_y = SampleGame.player.y + (16 / 2);
          } else if (bullet_turn === SampleGame.RIGHT) {
            bullet_x = SampleGame.player.x + 16.;
            bullet_y = SampleGame.player.y + (16 / 2);
          }
          _results = [];
          for (i = _j = 0, _ref1 = Shot.SHOT_MAX; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            if (this.bullet_obj[i] === null) {
              this.bullet_obj[i] = new Bullet(bullet_x, bullet_y, bullet_turn);
              SampleGame.game.rootScene.addChild(this.bullet_obj[i]);
              this.bullet_num++;
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      });
      this.addEventListener('enterframe', function() {
        var _j, _ref1, _results;
        _results = [];
        for (i = _j = 0, _ref1 = Shot.SHOT_MAX; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (this.bullet_obj[i] !== null) {
            if (this.bullet_obj[i].is_die) {
              SampleGame.game.rootScene.removeChild(this.bullet_obj[i]);
              this.bullet_obj[i] = null;
              _results.push(this.bullet_num--);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }

    return Shot;

  })(Sprite);

}).call(this);
